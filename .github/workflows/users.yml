name: users

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
    paths:
      - "users/**"
  push:
    branches: [main]
    paths:
      - "users/**"

jobs:
  avoid_reduncy:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Redundant Builds
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  test:
    if: ${{ github.event_name == 'pull_request' }}
    needs: [avoid_reduncy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run test
        run: echo "Running tests" 

  build_and_run_containers:
    if: ${{ github.event_name == 'pull_request' }}
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Build Docker Image
        run: docker build -t alexandergc/users:latest ./users
      - name: Pull Postgres Image
        run: docker pull postgres:15-alpine
      - name: Create Docker network
        run: docker network create test-network
      - name: Create Postgres container
        run: docker run --name postgres -p 5432:5432 -e POSTGRES_DB=dumb-db -e POSTGRES_USER=root -e POSTGRES_PASSWORD=pass --network test-network -d postgres:15-alpine
      - name: Create Nestjs container
        run: docker run --name users -p 5000:5000 -e PORT=5000 -e DB_USER=root -e DB_HOST=postgres -e DB_NAME=dumb-db -e DB_PASSWORD=pass -e DB_PORT=5432 --network test-network -d alexandergc/users      
      - name: Execute docker images
        run: docker images
      - name: Execute docker ps
        run: docker ps
      - name: Output
        run: echo "Containers running successfully!"

  build_and_push_dockerhub:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Build Docker Image
        run: docker build -t alexandergc/users:latest ./users
      - name: Push Docker Image to Docker Hub
        run: docker push alexandergc/users:latest
      - name: Output
        run: echo "Image pushed to DockerHub successfully!"

  connect_to_ec2:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: [build_and_push_dockerhub]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Configure SSH
        run: ssh-keyscan -H "${{ secrets.PUBLIC_INSTANCE_IP }}" >> ~/.ssh/known_hosts
      - name: Connect to EC2 Instance and Update pods
        run: |
          ssh -i ~/.ssh/id_rsa "${{ secrets.INSTANCE_USER }}"@"${{ secrets.PUBLIC_INSTANCE_IP }}" << EOF
            cd ./challenge-devops-abat
            sudo git pull origin main
            sudo chmod 755 ./k8s/scripts/restart-pods.sh
            ./k8s/scripts/restart-pods.sh
          EOF
